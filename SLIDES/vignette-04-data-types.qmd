---
vignette-nb: "04"
title: Data types and simple operations
long-title: Vignette 04 - Data types and simple operations
description-meta: Julien Arino - R for modellers - Vignette 04 - Data types and simple operations
author: Julien Arino
institute: University of Manitoba*
youtube: https://youtu.be/CaOvLZDjWw8
format: 
  revealjs:
    theme: [night, custom.scss]    
    template-partials:
      - title-slide.html
    toc: true
    toc-depth: 1
    toc-title: Outline
    auto-stretch: true
    progress: false
    preview-liiks: auto
    code-line-numbers: false
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    chalkboard: true
---

# Assignment

Two ways:

```{r}
#| echo: true
X <- 10
```

or

```{r}
#| echo: true
X = 10
```

<br>

First version is preferred by R purists.. I don't really care

# Lists

A very useful data structure, quite flexible and versatile

<br>

Empty list
```{r, echo=TRUE} 
L <- list()
```

<br>

Convenient for things like parameters

---

```{r}
#| echo: true
L$a <- 10
L$b <- 3
L[["another_name"]] <- "Plouf plouf"
```

```{r}
#| echo: true
L[1]
L[[2]]
L$a
L[["b"]]
L$another_name
```

## Accessing subsets of list entries

```{r}
#| echo: true
L = list()
for (i in 1:10) {
  L[[i]] = 2*i
}
```

<br>

Then to access entries 3 and 4

```{r}
#| echo: true
L[3:4]
```

## List names can be parameters

<br>

```{r}
#| echo: true
L <- list()
L$a <- 10
L$b <- 3
L[["another_name"]] <- "Plouf plouf"
for (n in names(L)) {
  writeLines(paste0("n=", n, ", L[[n]]=", L[[n]]))
}
```

## List of lists

```{r}
#| echo: true
L <- list()
L[["2024"]] = list()
L[["2024"]]$population = 200
L[["2024"]]$v = 1:5
```

```{r}
#| echo: true
L
```
Convenient: we could replicate the same list elements for "2023", for instance 

# Vectors

```{r}
#| echo: true
#| code-line-numbers: true
x = 1:10
(y <- c(x, 12))
```

<br>

(Line 2: surrounded by ( ) so that the result appears)

## Concatenating two vectors

- The `c()` command is ubiquitous in R

- Used to make vectors, concatenate them, etc.

```{r}
#| echo: true
x = 1:5
y = 10:12
(z = c(x, y))
```

## Vectors have a single entry type

<br>

```{r}
#| echo: true
z = c("red", "blue")
(z = c(z, 1))
```

<br>

Since the first two entries are characters, the added entry is also a character. Contrary to lists, vectors have all entries of the same type

## Populating an empty vector

<br>

```{r}
#| echo: true
v = c()
for (i in 1:10) {
  v = c(v, 2*i)
}
v
```

<br>

Very useful method to create a vector if you don't know in advance how many entries it will have

## Vector operations - Beware !

Say

```{r}
#| echo: true
#| label: set-x-vector
x = 1:10
```

<br>

Then `x+1` gives

```{r}
#| echo: true
#| label: add-1-to-x
x+1
```
i.e., adds 1 to all entries in the vector

## [Use seq to make more complex sequences]{.r-fit-text}

```{r}
#| echo: true
(x = seq(from = 2, to = 10, by = 1.5))
```

<br>

The `(from, to, by)` form is the default; others exist

<br>

```{r}
#| echo: true
y = seq(from = 2, to = 100, length.out = 6)

round(y, 2)
```

## Naming vector entries

<br>

It is possible (and often useful) to name vector entries

<br>

```{r}
#| echo: true
x = seq(from = 2, to = 10, by = 1.5)
names(x) = sprintf("v%d", 1:length(x))
x
```

<br>

```{r}
#| echo: true
x["v5"]
```

# Matrices

## Matrix (or vector) of zeros

<br>

```{r}
#| echo: true
(A <- mat.or.vec(nr = 2, nc = 3))
```

## Matrix with prescribed entries

```{r}
#| echo: true
(B <- matrix(c(1,2,3,4), nr = 2, nc = 2))
(C <- matrix(c(5,6,7,8), nc = 2, nr = 2, 
             byrow = TRUE))
```

<br>
Here and elsewhere, naming the arguments (e.g., `nr = 2`) allows to use arguments in any order

## Matrix operations

Probably the biggest annoyance in R compared to other languages !

<br>

- `A*B` is the *Hadamard product* $A\circ B$ (denoted `A.*B` in matlab), not the standard matrix multiplication

<br>

- Standard matrix multiplication is `A %*% B`

## For the matlab-ers here

<br>

- R does not have the keyword `end` to access the last entry in a matrix/vector/list..

<br>

- Use `length` (lists or vectors), `nchar` (character chains), `dim` (matrices.. careful, of course returns 2 values)

## Concatenating matrices

Dimensions must be compatible

```{r}
#| echo: true
rbind(B, C)
cbind(B, C)
```

## [Concatenating vectors and matrices]{.r-fit-text}

```{r}
#| echo: true
v = c(9, 10)
rbind(B, v)
cbind(B, v)
```

## Naming matrix rows/columns

Can be useful sometimes

```{r}
#| echo: true
rownames(B) = c("before", "after")
colnames(B) = c("Jane", "John")
B
```

<br>

Not assigning a value returns the existing values, if any

```{r}
#| echo: true
rownames(B)
colnames(C)
```

## Access matrix/vector entries

By position

```{r}
#| echo: true
B[1,2]
v[1]
```

<br>
By name, if present, and combining

```{r}
#| echo: true
B["before", "Jane"]
B["before", 2]
```

## Whole rows/columns

```{r}
#| echo: true
B["before", ]
B[, "Jane"]
C[,]
```

## Submatrices

<br>

```{r}
#| echo: true
D = matrix(data = runif(100), nc = 10)
D[2:3, 5:7]
```

<br>
`runif(100)`: generate 100 uniformly distributed random numbers between the default `min=0` and `max=1`

<br>
Note that indices are "local" to the result

---

## Submatrix of a named matrix

<br>

```{r}
#| echo: true
D = matrix(data = runif(100), nc = 10)
rownames(D) = sprintf("R%d", 1:dim(D)[1])
colnames(D) = sprintf("C%d", 1:dim(D)[2])
(E = D[2:3, 5:7])
```

<br>
Indices are "local" but names are those "extracted"

```{r}
#| echo: true
E["R3", "C6"]
E[2, 2]
```



# Data frames

## Data frames

<br>

From the R documentation: 

<br>

> [data frames are] tightly coupled collections of variables which share many of the properties of matrices and of lists, used as the fundamental data structure by most of R's modeling software

## [Data frames are lists and matrices]{.r-fit-text}

<br>

- Easier to access elements than in lists 

<br>

- More flexible than matrices (columns can be of different types)

---

```{r}
#| echo: true
L3 <- LETTERS[1:3]
fac <- sample(L3, 8, replace = TRUE)
(df <- data.frame(x = 1, y = 1:8, fac = fac))
```

<br>

```{r}
#| echo: true
is.character(df$x)
is.character(df$fac)
```

## [Data frames are lists and matrices (2)]{.r-fit-text}

<br>

```{r}
#| echo: true
df$fac
df[["fac"]]
df[, "fac"]
df[, 3]
```

---

<br>

```{r}
#| echo: true
df$fac[2]
df[["fac"]][2]
df[2, "fac"]
df[2, 3]
```

# which

## The `which` function

<br>

- Extremely useful

<br>

- Important to learn how to use

<br>

> Give the `TRUE` indices of a logical object, allowing for array indices

## [TRUE indices of a logical object?]{.r-fit-text}

<br>

- Return to logical tests in [Vignette 05](https://julien-arino.github.io/R-for-modellers/SLIDES/vignette-05-flow-control.html) about flow control

<br>

- `TRUE` indices: those indices for which a property is `TRUE`

<br>

- E.g., $x<1$?

---

```{r}
#| echo: true
df 
df$y < 5
which(df$y < 5)
df$fac == "A"
which(df$fac == "A")
```

## `which` is useful

```{r}
#| echo: true
df$fac[which(df$fac == "A")] = "Z"
df
```

## `which` can return array indices

```{r}
#| echo: true
E = matrix(data = runif(25), nr = 5)
(rc = which(E < 0.1, arr.ind = TRUE))
E[rc] = Inf
round(E, digits = 2)
```

# Type checking/casting

## Checking types

<br>

`is.type`, for whatever `type`, is typically defined

<br>

`is.array`, `is.atomic`, `is.character`, `is.data.frame`, `is.double`, `is.function`, `is.integer`, `is.list`, `is.logical`, `is.matrix`, `is.numeric`, `is.object`, `is.vector`

<br>

Many packages also define specific types

## Casting

<br>

Typically, if `is.type` exists for type `type`, then `as.type` also exists

<br>

`as.array`, `as.data.frame`, `as.list`, `as.matrix`, `as.numeric`, `as.vector`

<br>

Often: matrix $\leftrightarrow$ data frame, list $\leftrightarrow$ matrix

## Example: matrix to list

```{r}
#| echo: true
to_vary_m = 
  expand.grid(p1= seq(1, 3, length.out = 10),
              p2 = seq(0.8, 3, length.out = 10))
to_vary_l = split(to_vary_m, seq(nrow(to_vary_m)))
```

<br>
`expand.grid`: makes a matrix with every combination of the values of the vectors `p1` and `p2`

```{r}
#| echo: true
to_vary_m[3,]
to_vary_l[3]
```