---
vignette-nb: "04"
title: Data types and simple operations
long-title: Vignette 04 - Data types and simple operations
description-meta: Julien Arino - R for modellers - Vignette 04 - Data types and simple operations
author: Julien Arino
institute: University of Manitoba*
format: 
  revealjs:
    theme: [night, custom.scss]    
    template-partials:
      - title-slide.html
    toc: true
    toc-depth: 1
    toc-title: Outline
    auto-stretch: true
    progress: false
    preview-liiks: auto
    code-line-numbers: false
    chalkboard: true
---

# Assignment

Two ways:

```{r}
#| echo: true
X <- 10
```

or

```{r}
#| echo: true
X = 10
```

<br>

First version is preferred by R purists.. I don't really care

# Lists

A very useful data structure, quite flexible and versatile

<br>

Empty list
```{r, echo=TRUE} 
L <- list()
```

<br>

Convenient for things like parameters

---

```{r}
#| echo: true
L$a <- 10
L$b <- 3
L[["another_name"]] <- "Plouf plouf"
```

```{r}
#| echo: true
L[1]
L[[2]]
L$a
L[["b"]]
L$another_name
```

## Accessing subsets of list entries

```{r}
#| echo: true
L = list()
for (i in 1:10) {
  L[[i]] = 2*i
}
```

<br>

Then to access entries 3 and 4

```{r}
#| echo: true
L[3:4]
```

## List names can be parameters

<br>

```{r}
#| echo: true
L <- list()
L$a <- 10
L$b <- 3
L[["another_name"]] <- "Plouf plouf"
for (n in names(L)) {
  writeLines(paste0("n=", n, ", L[[n]]=", L[[n]]))
}
```



# Vectors

```{r}
#| echo: true
x = 1:10
y <- c(x, 12)

y
```

---

```{r}
#| echo: true
z = c("red", "blue")
z = c(z, 1)

z
```

<br>

Since the first two entries are characters, the added entry is also a character. Contrary to lists, vectors have all entries of the same type

## Populating an empty vector

```{r}
#| echo: true
v = c()
for (i in 1:10) {
  v = c(v, 2*i)
}

v
```

## Vector operations - Beware !

Say
```{r}
#| echo: true
#| label: set-x-vector
x = 1:10
```

<br>

Then `x+1` gives
```{r}
#| echo: true
#| label: add-1-to-x
x+1
```
i.e., adds 1 to all entries in the vector

## [Use seq to make more complex sequences]{.r-fit-text}

```{r}
#| echo: true
x = seq(from = 2, to = 10, by = 1.5)

x
```

<br>

The `(from, to, by)` form is the default; others exist

<br>

```{r}
#| echo: true
y = seq(from = 2, to = 100, length.out = 6)

round(y, 2)
```

## Naming vector entries

It is possible (and often useful) to name vector entries

<br>

```{r}
#| echo: true
x = seq(from = 2, to = 10, by = 1.5)
names(x) = sprintf("v%d", 1:length(x))
x
```

# Matrices

Matrix (or vector) of zeros
```R
A <- mat.or.vec(nr = 2, nc = 3)
```

<br> 

Matrix with prescribed entries

```R
B <- matrix(c(1,2,3,4), nr = 2, nc = 2)
C <- matrix(c(1,2,3,4), nc = 2, nr = 2, byrow = TRUE)
```

<br>
Here and elsewhere, naming the arguments (e.g., `nr = 2`) allows to use arguments in any order

## Matrix operations

Probably the biggest annoyance in R compared to other languages !

<br>

- `A*B` is the *Hadamard product* $A\circ B$ (denoted `A.*B` in matlab), not the standard matrix multiplication

<br>

- Standard matrix multiplication is `A %*% B`

## For the matlab-ers here

<br>

- R does not have the keyword `end` to access the last entry in a matrix/vector/list..

<br>

- Use `length` (lists or vectors), `nchar` (character chains), `dim` (matrices.. careful, of course returns 2 values)

# Data frames

# Type checking/casting

## Checking types

`is.type`, for whatever `type`, is typically defined

<br>

`is.array`, `is.atomic`, `is.character`, `is.data.frame`, `is.double`, `is.function`, `is.integer`, `is.list`, `is.logical`, `is.matrix`, `is.numeric`, `is.object`, `is.vector`

<br>

Many packages also define specific types

## Casting

<br>

Typically, if `is.type` exists for type `type`, then `as.type` also exists

<br>

`as.array`, `as.data.frame`, `as.list`, `as.matrix`, `as.numeric`, `as.vector`

<br>

Often: matrix $\leftrightarrow$ data frame, list $\leftrightarrow$ matrix